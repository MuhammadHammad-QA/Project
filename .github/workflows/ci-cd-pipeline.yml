# name: CI/CD Pipeline

# permissions:
#   contents: write
#   pull-requests: write
#   actions: write

# on:
#   push:
#     branches:
#       - main
  
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     # - name: Set up Python
#     #   uses: actions/setup-python@v5
#     #   with:
#     #     python-version: '3.10'

#     # - name: Install dependencies
#     #   run: |
#     #     python -m venv venv
#     #     source venv/bin/activate
#     #     pip install -r scripts/requirements.txt

#   test:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Install Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20'

#     - name: Install Newman
#       run: npm install -g newman

#     - name: Run Newman tests
#       run: |
#         newman run postman/Project.postman_collection2.json

#   merge:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#       pull-requests: write
#       repository-projects: write
#     needs: test
#     if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Install GitHub CLI
#       run: sudo apt-get install -y gh

#     - name: Authenticate GitHub CLI
#       run: echo "${{ secrets.PAT }}" | gh auth login --with-token

#     - name: Merge pull request
#       run: |
#         pr_number=${{ github.event.pull_request.number }}
#         gh pr merge $pr_number --merge

#   deploy_push:
#     runs-on: ubuntu-latest
#     needs: test
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Docker
#       uses: docker/setup-buildx-action@v3

#     - name: Install Docker Compose
#       run: sudo apt-get update && sudo apt-get install -y docker-compose

#     - name: Stop and Remove Existing Containers
#       run: |
#         docker-compose down || true
#         docker-compose rm -f

#     - name: Build Docker images
#       run: docker-compose build --no-cache

#     - name: Run Docker Compose
#       run: docker-compose up -d --force-recreate --build

#     - name: Wait for services to be ready
#       run: |
#         sleep 10
#         curl -f http://localhost:5000/ || exit 1

#   deploy_pr:
#     runs-on: ubuntu-latest
#     needs: merge
#     if: github.event_name == 'pull_request'
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Docker
#       uses: docker/setup-buildx-action@v3

#     - name: Install Docker Compose
#       run: sudo apt-get update && sudo apt-get install -y docker-compose

#     - name: Stop and Remove Existing Containers
#       run: |
#         docker-compose down || true
#         docker-compose rm -f

#     - name: Build Docker images
#       run: docker-compose build --no-cache

#     - name: Run Docker Compose
#       run: docker-compose up -d --force-recreate --build
#     - name: Wait for services to be ready
#       run: |
#         sleep 5
#         curl -f http://localhost:5000/ || exit 1


# # This is a basic workflow to help you get started with Actions














name: CI/CD Pipeline

permissions:
  contents: write
  pull-requests: write
  actions: write

on:
  push:
    branches:
      - main
  
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Newman
      run: npm install -g newman

    - name: Run Newman tests
      run: |
        newman run postman/Project.postman_collection2.json


  merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    needs: test
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install GitHub CLI
      run: sudo apt-get install -y gh

    - name: Authenticate GitHub CLI
      run: echo "${{ secrets.PAT }}" | gh auth login --with-token

    - name: Merge pull request
      run: |
        pr_number=${{ github.event.pull_request.number }}
        gh pr merge $pr_number --merge

  build:
    runs-on: ubuntu-latest
    needs: [test, merge]
    
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Remove conflicting containerd package
      run: sudo apt-get remove -y containerd || true

    - name: Fix broken dependencies
      run: sudo apt-get install -f -y


    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker images
      run: docker-compose build --no-cache

    - name: Tag Docker images
      run: |
        docker tag project_web:latest hammadqa/proj:latest

    - name: Push Docker images
      run: |
        docker push hammadqa/proj:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Pull Docker images by name
      run: |
        docker pull hammadqa/proj:latest

    - name: Stop and Remove Existing Containers
      run: |
        docker-compose down || true
        docker-compose rm -f

    - name: Run Docker Compose
      run: docker-compose up -d --force-recreate

    - name: Wait for services to be ready
      run: |
        sleep 10
        curl -f http://localhost:5000/ || exit 1


