### libFMD: 2022/12/30 08:50 PST Setting Up GPU
### libFMD: maxNumCompThreads = 4
### libFMD: GPU memory max pool size is 1212.0 MiB.
### Loading config file /mnt/storage_d2s/d2suser06/releases/ILT.2023.02.ilt-cdp43/etc/tmilt_193i.toml.

# CostFunctional Stage CTM
### CostFunctional take FastQuantizer MRC Step before evaluate [false]
@@@ Cached 20 of 20 kernels (12635.6 MiB GPU memory available)
@@@ Cleared 640 MiB of Kernel Cache (13700 MiB GPU memory free).
@@@ Cleared Kernel Cache (13700.5 MiB GPU memory available)
### FastQuantizer mrcWidthSpaceIncrement set to 0.000000
### FastQuantizer mrcMaxCorrection set to 0.000000
### MRC Limts are width=12.5 space=12.5 area=500
### MRC Limts are width=12.5 space=12.5 area=500

# CostFunctional Stage QTM0
#   CostFunctional.mu = 0.01
#   CostFunctional.nu = 0.04
### CostFunctional take FastQuantizer MRC Step before evaluate [false]
@@@ Cached 20 of 20 kernels (12509.5 MiB GPU memory available)
@@@ Cleared 640 MiB of Kernel Cache (13700 MiB GPU memory free).
@@@ Cleared Kernel Cache (13700.5 MiB GPU memory available)
### FastQuantizer addMask set to 1

# CostFunctional Stage QTM1
#   CostFunctional.mu = 0.1
#   CostFunctional.nu = 0.4
#   FastQuantizer.inverseTransitionCoeff = 0.2
#   FastQuantizer.singlePixelCoeff = 0.1
### CostFunctional take FastQuantizer MRC Step before evaluate [true]
@@@ Cached 20 of 20 kernels (12445.5 MiB GPU memory available)
@@@ Cleared 640 MiB of Kernel Cache (13700 MiB GPU memory free).
@@@ Cleared Kernel Cache (13700.5 MiB GPU memory available)

# CostFunctional Stage QTM2_0
#   CostFunctional.mu = 0.2
#   CostFunctional.nu = 0.8
#   CostFunctional.tcSlope = 1.25
#   CostFunctional.tcUpsampleFactor = 3
#   FastQuantizer.inverseTransitionCoeff = 0.2
#   FastQuantizer.singlePixelCoeff = 0.1
#   FastQuantizer.areaCoeff = 1
### CostFunctional take FastQuantizer MRC Step before evaluate [true]
@@@ Cached 20 of 20 kernels (12445.5 MiB GPU memory available)
@@@ Cleared 640 MiB of Kernel Cache (13700 MiB GPU memory free).
@@@ Cleared Kernel Cache (13700.5 MiB GPU memory available)

# CostFunctional Stage QTM2_1
#   CostFunctional.mu = 0.2
#   CostFunctional.nu = 0.8
#   CostFunctional.tcSlope = 1.6
#   CostFunctional.tcUpsampleFactor = 3
#   FastQuantizer.inverseTransitionCoeff = 0.2
#   FastQuantizer.singlePixelCoeff = 0.1
#   FastQuantizer.areaCoeff = 1
### CostFunctional take FastQuantizer MRC Step before evaluate [true]
@@@ Cached 20 of 20 kernels (12445.5 MiB GPU memory available)
@@@ Cleared 640 MiB of Kernel Cache (13700 MiB GPU memory free).
@@@ Cleared Kernel Cache (13700.5 MiB GPU memory available)

# CostFunctional Stage QTM2_2
#   CostFunctional.mu = 0.2
#   CostFunctional.nu = 0.8
#   CostFunctional.tcSlope = 2
#   CostFunctional.tcUpsampleFactor = 3
#   FastQuantizer.inverseTransitionCoeff = 0.2
#   FastQuantizer.singlePixelCoeff = 0.1
#   FastQuantizer.areaCoeff = 1
### CostFunctional take FastQuantizer MRC Step before evaluate [true]
@@@ Cached 20 of 20 kernels (12445.5 MiB GPU memory available)
@@@ Cleared 640 MiB of Kernel Cache (13700 MiB GPU memory free).
@@@ Cleared Kernel Cache (13700.5 MiB GPU memory available)

# CostFunctional Stage QTM2
#   CostFunctional.mu = 0.2
#   CostFunctional.nu = 0.8
#   CostFunctional.tcSlope = 3
#   CostFunctional.tcUpsampleFactor = 3
#   FastQuantizer.inverseTransitionCoeff = 0.2
#   FastQuantizer.singlePixelCoeff = 0.1
#   FastQuantizer.areaCoeff = 1
### CostFunctional take FastQuantizer MRC Step before evaluate [true]
@@@ Cached 20 of 20 kernels (12445.5 MiB GPU memory available)
@@@ Cleared 640 MiB of Kernel Cache (13700 MiB GPU memory free).
@@@ Cleared Kernel Cache (13700.5 MiB GPU memory available)
### FastQuantizer areaWatershedFraction set to 0.500000
### FastQuantizer widthWatershedFraction set to 0.500000
### FastQuantizer spaceWatershedFraction set to 0.500000

# MRC Stage MRC1
#   FastQuantizer.singlePixelCoeff = 0.1
#   FastQuantizer.areaCoeff = 0.5
#   FastQuantizer.plateauCoeff = 1
#   FastQuantizer.use2xMrc = 1
#   FastQuantizer.mrcStepSize = 0.2
#   FastQuantizer.mrcIterations = 10
### cleanMRC: iters = 10 pixel costs = [69,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [95,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [111,0] contour crossing costs = [3,0]
### cleanMRC: iters = 10 pixel costs = [35,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [33,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [57,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [23,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [494,2] contour crossing costs = [8,0]
### cleanMRC: iters = 10 pixel costs = [3575,0] contour crossing costs = [2,0]
### cleanMRC: iters = 10 pixel costs = [3344,8] contour crossing costs = [199,0]
### cleanMRC: iters = 10 pixel costs = [11,0] contour crossing costs = [3,0]
### cleanMRC: iters = 10 pixel costs = [636,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [8715,3] contour crossing costs = [367,0]
### cleanMRC: iters = 10 pixel costs = [378,2] contour crossing costs = [217,0]
### cleanMRC: iters = 10 pixel costs = [6496,0] contour crossing costs = [975,0]
### cleanMRC: iters = 10 pixel costs = [5900,0] contour crossing costs = [88,0]
### cleanMRC: iters = 10 pixel costs = [2506,23] contour crossing costs = [834,10]
### cleanMRC: iters = 10 pixel costs = [857,0] contour crossing costs = [144,0]
### cleanMRC: iters = 10 pixel costs = [264,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [1026,4] contour crossing costs = [79,0]
### cleanMRC: iters = 10 pixel costs = [67,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [20,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [15,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [34,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [790,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [1,0] contour crossing costs = [4,0]
### cleanMRC: iters = 10 pixel costs = [24,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [69,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [82,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [16,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [11,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [56,0] contour crossing costs = [4,0]
### cleanMRC: iters = 10 pixel costs = [78,0] contour crossing costs = [6,0]
### cleanMRC: iters = 10 pixel costs = [1258,1] contour crossing costs = [7,0]
### cleanMRC: iters = 10 pixel costs = [2604,1] contour crossing costs = [0,4]
### cleanMRC: iters = 10 pixel costs = [1778,2] contour crossing costs = [212,0]
### cleanMRC: iters = 10 pixel costs = [123,0] contour crossing costs = [16,0]
### cleanMRC: iters = 10 pixel costs = [510,0] contour crossing costs = [316,0]
### cleanMRC: iters = 10 pixel costs = [137,0] contour crossing costs = [20,0]
### cleanMRC: iters = 10 pixel costs = [436,0] contour crossing costs = [92,0]
### cleanMRC: iters = 10 pixel costs = [4829,10] contour crossing costs = [1362,3]
### cleanMRC: iters = 10 pixel costs = [1568,0] contour crossing costs = [731,0]
### cleanMRC: iters = 10 pixel costs = [673,0] contour crossing costs = [52,0]
### cleanMRC: iters = 10 pixel costs = [74,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [22,0] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [305,0] contour crossing costs = [0,0]

# CostFunctional Stage QTM3
#   CostFunctional.mu = 0.2
#   CostFunctional.nu = 0.8
#   CostFunctional.tcSlope = 3
#   CostFunctional.tcUpsampleFactor = 3
#   CostFunctional.nominalOnly = 1
#   FastQuantizer.inverseTransitionCoeff = 0.2
#   FastQuantizer.singlePixelCoeff = 0.1
#   FastQuantizer.areaCoeff = 0.25
#   FastQuantizer.plateauCoeff = 1
#   FastQuantizer.use2xMrc = 1
#   FastQuantizer.mrcStepSize = 0.05
#   FastQuantizer.mrcIterations = 1
### CostFunctional take FastQuantizer MRC Step before evaluate [true]
@@@ Cached 40 of 40 kernels (11023.5 MiB GPU memory available)
@@@ Cleared 1280 MiB of Kernel Cache (13060 MiB GPU memory free).
@@@ Cleared Kernel Cache (13060.5 MiB GPU memory available)

# MRC Stage MRC2
#   FastQuantizer.singlePixelCoeff = 0.1
#   FastQuantizer.areaCoeff = 0.25
#   FastQuantizer.plateauCoeff = 1
#   FastQuantizer.use2xMrc = 1
#   FastQuantizer.mrcStepSize = 0.025
#   FastQuantizer.mrcIterations = 10
### cleanMRC: iters = 10 pixel costs = [7,1] contour crossing costs = [0,0]
### cleanMRC: iters = 10 pixel costs = [637,188] contour crossing costs = [2,0]
### cleanMRC: iters = 10 pixel costs = [269,120] contour crossing costs = [9,0]
### cleanMRC: iters = 10 pixel costs = [4569,0] contour crossing costs = [4,0]
### cleanMRC: iters = 10 pixel costs = [34,0] contour crossing costs = [4,0]
### cleanMRC: iters = 10 pixel costs = [131,4] contour crossing costs = [0,0]
@@@ Cleared 0 MiB of Kernel Cache (14344 MiB GPU memory free).
